{"name":"errorist","tagline":"If you don't have an Error, errorist gives you one","body":"<img src=\"https://cldup.com/z7wCHQYuKW.svg\" alt=\"errorist\" width=\"128\" height=\"128px\"/> \r\n\r\n# errorist [![npm version](https://badge.fury.io/js/errorist.svg)](http://badge.fury.io/js/errorist) [![Build Status](https://travis-ci.org/boneskull/errorist.svg?branch=master)](https://travis-ci.org/boneskull/errorist) [![Codacy Badge](https://www.codacy.com/project/badge/c9dc230d740b4e63bdd2a3fce9e7b141)](https://www.codacy.com/app/boneskull/errorist) \r\n\r\n> If you don't have an Error, errorist gives you one \r\n\r\n## Install\r\n\r\n```shell\r\n$ npm install errorist\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar errorist = require('errorist');\r\n\r\nfunction asyncFunc(callback) {\r\n  process.nextTick(function() {\r\n    callback('this is not an Error; it is a string');\r\n  });\r\n}\r\n\r\nasyncFunc(function(err) {\r\n  if (err) {\r\n    // you would never do a thing like throw a string, right?\r\n    throw errorist(err);\r\n  }\r\n});\r\n\r\n// or with promises\r\nrequire('bluebird').promisify(asyncFunc)()\r\n  .catch(err) {\r\n    // stack trace FTW\r\n    throw errorist(err);\r\n  });\r\n```\r\n\r\n## Notes\r\n\r\nerrorist's flow is a bit like this:\r\n\r\n- If the value is an `Error`\r\n  - `return` it.\r\n- If the value is a non-`null` object or function\r\n  - and its `message` property is a `string`\r\n    - `return` a new `Error` with the `message`.\r\n  - otherwise\r\n     - stringify the object into JSON \r\n     - upon success\r\n       - `return` the stringified object as the `Error`'s `message`.        \r\n     - otherwise\r\n       - `return` an empty `Error` instance.\r\n- Otherwise\r\n  - `return` an `Error` instance with the primitive, `null`, or `undefined` value as its message.\r\n  \r\n## License\r\n\r\nÂ© 2015 [Christopher Hiller](https://boneskull.com).  Licensed MIT.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}